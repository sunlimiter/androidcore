package com.tywho.dblibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tywho.dblibrary.bean.AppStartImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_START_IMAGE".
*/
public class AppStartImageDao extends AbstractDao<AppStartImage, Long> {

    public static final String TABLENAME = "APP_START_IMAGE";

    /**
     * Properties of entity AppStartImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
        public final static Property WebUrl = new Property(3, String.class, "webUrl", false, "WEB_URL");
        public final static Property StartTime = new Property(4, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, long.class, "endTime", false, "END_TIME");
    }


    public AppStartImageDao(DaoConfig config) {
        super(config);
    }
    
    public AppStartImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_START_IMAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"FILE\" TEXT," + // 2: file
                "\"WEB_URL\" TEXT," + // 3: webUrl
                "\"START_TIME\" INTEGER NOT NULL ," + // 4: startTime
                "\"END_TIME\" INTEGER NOT NULL );"); // 5: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_START_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppStartImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(4, webUrl);
        }
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppStartImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(4, webUrl);
        }
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppStartImage readEntity(Cursor cursor, int offset) {
        AppStartImage entity = new AppStartImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // file
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // webUrl
            cursor.getLong(offset + 4), // startTime
            cursor.getLong(offset + 5) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppStartImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWebUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.getLong(offset + 4));
        entity.setEndTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppStartImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppStartImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppStartImage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
